# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java#apache-maven-with-a-settings-path

name: Maven Publish Master On Push

on:
  push:
    branches:
      - master
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
   
jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 1.8 for Github deployment
      uses: actions/setup-java@v3
      with:
        java-version: 8.0.302+8
        distribution: 'temurin'
        server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file

    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Publish to GitHub Packages Apache Maven
      run: mvn deploy -s $GITHUB_WORKSPACE/settings.xml
      env:
        GITHUB_TOKEN: ${{ github.token }}
        
    - name: Read Maven project version
      id: read_version
      run: |
         version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
         echo "version=${version}" >> $GITHUB_OUTPUT

    - name: Check if version is a snapshot version
      id: check_release
      run: |
        version="${{ steps.read_version.outputs.version }}"
        if [[ $version =~ ^[0-9]+\.[0-9]+\.[0-9]+(-SNAPSHOT)?$ ]]; then
          echo "is_snapshot=false" >> $GITHUB_OUTPUT
        else
          echo "is_snapshot=true" >> $GITHUB_OUTPUT
        fi
      
    - name: Set up JDK 1.8 for NERZ Deployment
      uses: actions/setup-java@v3
      with:
        java-version: 8.0.302+8
        distribution: 'temurin'
        server-id: nerz-snapshots 
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD
      run: |
        echo "Ist ein Snapshot: ${{ steps.check_release.outputs.is_snapshot }}"
        
    - name: Publish to NERZ Nexus
      if: steps.check_release.outputs.is_snapshot == 'true'
      run: mvn deploy -P nerz
      env:
         MAVEN_USERNAME: ${{ secrets.NERZ_USERNAME }}
         MAVEN_PASSWORD: ${{ secrets.NERZ_TOKEN }}
    
    - name: JFROG CLI
      uses: jfrog/setup-jfrog-cli@v3.3.0
      env:
        JF_ARTIFACTORY_1: ${{ secrets.JF_ARTIFACTORY_SECRET_1 }}
    - run: jfrog --version
    - run: jfrog rt mvn clean install 
    #- run: jfrog rt u "target/com.bitctrl*.jar" "/com/bitctrl"
      
      
      
      
        
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
